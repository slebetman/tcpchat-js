#! /usr/bin/env node

var net = require('net');
var chalk = require('chalk');

var args = process.argv.slice(2);
var currentSocket;

function SocketList () {
	this.next_id = 1;
	this.sockets = {};
}

SocketList.prototype = {
	add: function (socket) {
		var id = 'sock' + this.next_id++;
		this.sockets[id] = socket;
		socket.socketlist_id = id;
		console.log(chalk.bgCyan('\rnew connection ' + id + ' '));
		prompt();
		
		return id;
	},
	remove: function (item) {
		var id = item;
		if (item instanceof net.Socket) {
			id = item.socketlist_id;
		}
		console.log(chalk.bgYellow('\rclosing connection ' + id + ' '));
		prompt();
		delete this.sockets[id];
	},
	get: function (id) {
		return this.sockets[id];
	},
	list: function () {
		return Object.keys(this.sockets);
	}
}

var sockets = new SocketList();

function send (txt) {
	var sock = sockets.get(currentSocket);
	if (sock && sock.writable) {
		sock.write(txt);
	}
}

function recv (sock_id) {
	return function(x){
		console.log('\r' + 
			x.toString('utf8')
				.trimRight('\n')
				.split('\n')
				.map(function(x){
					return chalk.inverse(sock_id + '<-') + ' ' + x;
				})
				.join('\n')
		);
		prompt();
	}
}

function prompt () {
	setTimeout(function(){
		var s = currentSocket || '';
	
		process.stdout.write('\r' + s + '-> ');
	},200);
}

if (args.length < 2) {
	console.log('must either specify address and port or run as -server\n');
	process.exit();
}

var host = args[0];
var port = args[1];

function init_console () {
	console.log(chalk.inverse('type /help for help '));
	prompt();
	process.stdin.on('data',function(x){
		var command = x.toString('utf8').replace('\n','').split(/\s+/);
		
		switch (command[0]) {
		case '/help':
			console.log([
				'Available commands:',
				'/exit               - terminate this program',
				'/list               - list all open sockets',
				'/switch <socket>    - change current socket',
				'/close <socket>     - terminate socket connection',
				'<text...>           - send text to current socket'
			].join('\n') + '\n');
			break;
		case '/exit':
			process.exit();
			break;
		case '/list':
			console.log(sockets.list()
				.map(x=>{
					var isCurrent = x == currentSocket ? ' (current)' : '';
					return x + ' ' + sockets.get(x).remoteAddress + isCurrent;
				})
				.join('\n')
			);
			break;
		case '/switch':
			if (sockets.get(command[1])) {
				currentSocket = command[1];
			}
			else {
				console.log(
					'ERROR: socket ' + command[1] +
					' does not exist'
				);
			}
			break;
		case '/close':
			var sock_id = command[1];
			
			if (!sock_id) {
				var s = sockets.get(currentSocket);
				if (s) {
					s.end();
					currentSocket = null;
				}
				else {
					console.log(
						'ERROR: there is no current socket'
					);
				}
			}
			else {
				var s = sockets.get(sock_id);
				if (s) {
					s.end();
					if (currentSocket == sock_id) {
						currentSocket = null;
					}
				}
				else {
					console.log(
						'ERROR: socket ' + command[1] +
						' does not exist'
					);
				}
			}
			break;
		default:
			send(x);
		}
		prompt();
	});
}

function die (err) {
	console.log(err.toString());
	process.exit();
}

function registerSocket (sock) {
	var sock_id = sockets.add(sock);
	currentSocket = sock_id;
	
	sock.on('data',recv(sock_id));
	
	return sock_id;
}

if (host == '-server') {
	net.createServer(function(sock){
		var sock_id = registerSocket(sock);
		
		sock.on('end',function(){
			sockets.remove(sock_id);
			if (currentSocket == sock_id) {
				currentSocket = null;
			}
		})
	})
	.on('error',die)
	.listen(port,init_console);
}
else {
	var sock = net.createConnection({
		host: host,
		port: port
	});
	
	var sock_id = registerSocket(sock);
	sock.on('connect',init_console)
		.on('end',function(){
			process.exit();
		})
		.on('error',die);
}
